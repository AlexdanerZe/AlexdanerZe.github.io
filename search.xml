<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>李芊颖，520快乐！</title>
      <link href="/2019/05/20/%E6%9D%8E%E8%8A%8A%E9%A2%96%EF%BC%8C520%E5%BF%AB%E4%B9%90%EF%BC%81/"/>
      <url>/2019/05/20/%E6%9D%8E%E8%8A%8A%E9%A2%96%EF%BC%8C520%E5%BF%AB%E4%B9%90%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<p>#李芊颖，520快乐！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/05/19/hello-world/"/>
      <url>/2019/05/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new "My New Post"</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Fcmformojo使用教程</title>
      <link href="/2019/04/05/Fcmformojo%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/04/05/Fcmformojo%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Fcmformojo使用教程"><a href="#Fcmformojo使用教程" class="headerlink" title="Fcmformojo使用教程"></a>Fcmformojo使用教程</h1><p>能够使你关闭后台应用程序，但微信/QQ仍能收发消息</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>1.需要一台服务器</p><p>2.服务器系统建议使用centos 7</p><p>3.需要开放端口 5003/5004/5005（具体操作建议自行查看各个vps提供商的开放端口操作）</p><p>4.最好会liunx一些操作，以及vim编辑器的常规操作</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="假设相关环境"><a href="#假设相关环境" class="headerlink" title="假设相关环境"></a>假设相关环境</h3><pre><code>yum -y groupinstall "Development Tools"</code></pre><pre><code>yum install vim git openssl-devel perl cpan make gcc g++</code></pre><p>安装EPEL 仓库</p><pre><code>yum install epel-release</code></pre><p>安装nodejs</p><pre><code>yum install nodejs</code></pre><p>安装npm</p><pre><code>yum install npm</code></pre><p>安装git</p><pre><code>yum install git</code></pre><h2 id="安装项目"><a href="#安装项目" class="headerlink" title="安装项目"></a>安装项目</h2><p>由于我们需要 Mojo::WebQQ 这个 Perl 语言项目作为主机端接收QQ消息的平台，同时 CentOS 7 自带 yum 源没有 Cpanm 包管理，所以接下来需要安装 Cpanm</p><p><code>`</code>yum install perl-App-cpanminus.noarch<br>yum install perl-App-cpanminus.noarch</p><pre><code>```curl -kL https://cpanmin.us | perl - App::cpanminuscurl -kL https://cpanmin.us | perl - App::cpanminus官方服务器在国外，如果无法访问，可以选择下面的命令： curl http://share-10066126.cos.myqcloud.com/cpanm.pl|perl - App::cpanminus</code></pre><p>安装好cpanm，我们开始安装Mojo::Webqq</p><pre><code>cpanm Mojo::Webqq</code></pre><p>注：这个安装很玄学，往往安装不是完整的，即便我是国外的vps，可以再执行以下代码，安装国内镜像</p><pre><code>cpanm --mirror http://mirrors.163.com/cpan/ Mojo::Webqq</code></pre><p>安装拓展：</p><pre><code>yum install -y perl-Crypt-OpenSSL-RSA perl-Crypt-OpenSSL-Bignum</code></pre><p>建议再次检查依赖模块检查</p><p>webqq:</p><blockquote><pre><code>curl -ks "https://raw.githubusercontent.com/sjdy521/Mojo-Webqq/master/script/check_dependencies.pl"|perl -</code></pre></blockquote><h5 id="下载服务端"><a href="#下载服务端" class="headerlink" title="下载服务端"></a>下载服务端</h5><p>执行下面几条命令来下载服务端并安装所需的 node 依赖。</p><pre><code>git clone https://github.com/RikkaApps/FCM-for-Mojo-Server.gitcd FCM-for-Mojo-Servercp config.example.js config.jsnpm install</code></pre><p>运行</p><blockquote><p>为避免错过二维码扫描通知而不知所措，建议在运行前先完成客户端配置的一部分（填写好服务器 URL）。</p></blockquote><pre><code>npm start</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Push </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gcmformojo使用教程</title>
      <link href="/2019/04/05/Gcmformojo%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2019/04/05/Gcmformojo%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Gcmformojo使用教程"><a href="#Gcmformojo使用教程" class="headerlink" title="Gcmformojo使用教程"></a>Gcmformojo使用教程</h1><p>能够使你关闭后台应用程序，但微信/QQ仍能收发消息</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>1.需要一台服务器（gcm推送需要能翻墙服务器，mipush可用国内服务器）</p><p>2.服务器系统建议使用centos 7</p><p>3.需要开放端口 QQ：5000和微信：3000（具体操作建议自行查看各个vps提供商的开放端口操作）</p><p>4.最好会liunx一些操作，以及vim编辑器的常规操作</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="架设相关环境（均在root权限下）"><a href="#架设相关环境（均在root权限下）" class="headerlink" title="架设相关环境（均在root权限下）"></a>架设相关环境（均在root权限下）</h3><pre><code>yum -y groupinstall "Development Tools"</code></pre><pre><code>yum install vim git openssl-devel perl cpan make gcc g++</code></pre><h2 id="安装项目"><a href="#安装项目" class="headerlink" title="安装项目"></a>安装项目</h2><p>由于我们需要 Mojo::WebQQ 这个 Perl 语言项目作为主机端接收QQ消息的平台，同时 CentOS 7 自带 yum 源没有 Cpanm 包管理，所以接下来需要安装 Cpanm</p><p>~~~ yum install perl-App-cpanminus.noarch<br>yum install perl-App-cpanminus.noarch</p><pre><code>~~~ curl -kL https://cpanmin.us | perl - App::cpanminuscurl -kL https://cpanmin.us | perl - App::cpanminus官方服务器在国外，如果无法访问，可以选择下面的命令： curl http://share-10066126.cos.myqcloud.com/cpanm.pl|perl - App::cpanminus</code></pre><p>安装好cpanm，我们开始安装Mojo::Webqq</p><pre><code>cpanm Mojo::Webqq</code></pre><p>注：这个安装很玄学，往往安装不是完整的，即便我是国外的vps，可以再执行以下代码，安装国内镜像</p><pre><code>cpanm --mirror http://mirrors.163.com/cpan/ Mojo::Webqq</code></pre><p>Mojo::Weixin的安装方法大致相同</p><p>~~~ cpanm Mojo::Weixin<br>cpanm Mojo::Weixin</p><pre><code></code></pre><p>cpanm –mirror <a href="http://mirrors.163.com/cpan/" target="_blank" rel="noopener">http://mirrors.163.com/cpan/</a> Mojo::Weixin</p><pre><code>建议再次检查依赖模块检查webqq:> ```> curl -ks "https://raw.githubusercontent.com/sjdy521/Mojo-Webqq/master/script/check_dependencies.pl"|perl -> ```weixin:> ```> curl -ks "https://raw.githubusercontent.com/sjdy521/Mojo-Weixin/master/script/check_dependencies.pl"|perl -> ```### 设定文件这里我们使用vim对文件进行编辑。~~~ vim qq.plvim qq.pl</code></pre><p>可能很多人不了解vim的基础操作，下面介绍一下</p><p>~~~ i      进入编辑模式<br>i      进入编辑模式<br>esc    退出编辑模式<br>:wq      退出编辑模式下，保存并退出<br>:q!      退出编辑模式下，强制退出<br>:w!      退出编辑模式下，强制保存，无视权限</p><pre><code>这里给出一个 Perl 脚本文件的模板，具体内容请根据实际情况替换更改~~~ use Mojo::Webqq;use Mojo::Webqq;#微信使用 use Mojo::Weixinmy $client = Mojo::Webqq->new(log_encoding=>"utf-8");$client->load("ShowMsg");#请根据自己所需的推送服务进行选择并删除或注释不需要的部分，填写格式请仿照 GCM 的方式填写#以下为 GCM 推送$client->load("GCM",data=>{api_url => 'https://gcm-http.googleapis.com/gcm/send',api_key=>'AIzaSyB18io0hduB_3uHxKD3XaebPCecug27ht8',registration_ids=>["输入你自己从 GCMForMojo APP中获取到的令牌"],allow_group=>["接收群消息的号码，如需要推送全部群消息可删除这一行，每个群号码之间使用 "", 分隔"],#注：group这里微信是群聊名称，qq是群号码#微信需要屏蔽公众号消息可加上 is_ban_official =>1,ban_group=>[],allow_discuss=>[],ban_discuss=>[],#此处为讨论组，填写格式同上});#以下为 MiPush 推送$client->load("MiPush",data=>{registration_ids=>[""],allow_group=>[""],ban_group=>[],allow_discuss=>[],ban_discuss=>[],});#以下为 HwPush 推送$client->load("HwPush",data=>{registration_ids=>[""],allow_group=>[""],ban_group=>[],allow_discuss=>[],ban_discuss=>[],});$client->load("UploadQRcode");$client->load("Openqq",data=>{#如果是微信改为 Openwxlisten => [{host=>"0.0.0.0",port=>5000}, ] ,#如果是推送微信的话需要保证端口不重复，并请保证所设定的端口已经在防火墙内放行，同时需要在 APP 内设定好推送服务器的地址和端口#微信可改端口3000#注：host不需要改，否则发不了消息，只需要在app上改服务器。});#不需要 APP 内回复功能请删除以上三行（不包括被 # 号注释掉的几行）$client->run();</code></pre><p>保存退出后执行</p><p>~~~ perl qq.pl<br>perl qq.pl</p><pre><code>这时候你的 GCMForMojo APP 应该会弹出一条检测到二维码事件的通知，点击它，使用手机端 QQ 扫描这个二维码，你的 GCMForMojo 就跑起来了注：微信需要借助第二台设备进行扫码登陆### 后台运行perl进程并不会后台运行，这时候我们需要借助于screen命令先安装screen~~~ yum install -y screenyum install -y screen</code></pre><p>新建一个名为qqpush的screen窗口</p><pre><code>screen -S qqpush</code></pre><p>再执行</p><pre><code>perl qq.pl</code></pre><p>最后</p><pre><code>按Ctrl +a +d</code></pre><p>便可以退出客户端并且保持后台进行了</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Push </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
